@page "/protect-pdf"
@using PdfSharp.Pdf.IO;
@using pdftools.kayinleong.com.Models;
@inject IJSRuntime JS

<section class="flex flex-col gap-5 lg:px-40">
    <EditForm EditContext="@editContext" OnSubmit="@Submit">
        <DataAnnotationsValidator />
        @if (!FormValid)
        {
            <div class="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
                <ValidationSummary />
            </div>
        }

        <div class="flex items-center justify-center w-full">
            <label for="dropzone-file" class="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600">
                <div class="flex flex-col items-center justify-center pt-5 pb-6">
                    <svg class="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2" />
                    </svg>
                    <p class="mb-2 text-sm text-gray-500 dark:text-gray-400"><span class="font-semibold">Click to upload</span> or drag and drop</p>
                    <p class="text-xs text-gray-500 dark:text-gray-400">SVG, PNG, JPG or GIF (MAX. 800x400px)</p>
                </div>
                <InputFile OnChange="LoadFiles" id="dropzone-file" type="file" class="hidden" />
            </label>
        </div>

        <div class="mt-5 w-full flex justify-between">
            <span></span>
            <button type="submit" class="text-gray-900 bg-gradient-to-r from-teal-200 to-lime-200 hover:bg-gradient-to-l hover:from-teal-200 hover:to-lime-200 focus:ring-4 focus:outline-none focus:ring-lime-200 dark:focus:ring-teal-700 font-medium rounded-lg text-sm px-5 py-2.5 text-center">
                Protect Now
            </button>
        </div>
    </EditForm>
</section>

@code {
    private ProtectPdfModel Model = new();
    private EditContext editContext;
    private bool FormValid = true;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Model);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        Model.PdfFile = e.File;
    }

    private async Task Submit()
    {
        FormValid = editContext.Validate();
        if (FormValid)
        {
            await RunProtectPdf();
        }
    }

    private async Task RunProtectPdf()
    {
        var targetPath = Path.Combine("/", Model.PdfFile.Name);
        await using FileStream fs = new(targetPath, FileMode.Create);
        await Model.PdfFile.OpenReadStream(51200000).CopyToAsync(fs);

        var doc = PdfReader.Open(Model.PdfFile.Name);
        var securitySettings = doc.SecuritySettings;
        securitySettings.UserPassword = "user";
        securitySettings.OwnerPassword = "owner";
        securitySettings.PermitAccessibilityExtractContent = false;
        securitySettings.PermitAnnotations = false;
        securitySettings.PermitAssembleDocument = false;
        securitySettings.PermitExtractContent = false;
        securitySettings.PermitFormsFill = true;
        securitySettings.PermitFullQualityPrint = false;
        securitySettings.PermitModifyDocument = true; 
        securitySettings.PermitPrint = false;
        doc.Save("enc_" + Model.PdfFile.Name);
    }
}